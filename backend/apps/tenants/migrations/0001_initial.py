# Generated by Django

from django.db import migrations, models
import django.db.models.deletion
import django.core.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('schools', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('schema_name', models.CharField(
                    help_text='Nom du schéma PostgreSQL (ex: lycee_morvan)',
                    max_length=63,
                    unique=True,
                    validators=[
                        django.core.validators.RegexValidator(
                            message="Le nom du schéma doit commencer par une lettre minuscule et ne contenir que des lettres minuscules, chiffres et underscores",
                            regex='^[a-z][a-z0-9_]*$'
                        )
                    ]
                )),
                ('domain_url', models.CharField(
                    help_text='URL complète du sous-domaine (ex: lycee-morvan.peproscolaire.fr)',
                    max_length=128,
                    unique=True
                )),
                ('primary_color', models.CharField(
                    default='#1976D2',
                    help_text="Couleur principale de l'interface",
                    max_length=7,
                    validators=[
                        django.core.validators.RegexValidator(
                            message='La couleur doit être au format hexadécimal (ex: #1976D2)',
                            regex='^#[0-9A-Fa-f]{6}$'
                        )
                    ]
                )),
                ('secondary_color', models.CharField(
                    default='#424242',
                    help_text="Couleur secondaire de l'interface",
                    max_length=7,
                    validators=[
                        django.core.validators.RegexValidator(
                            message='La couleur doit être au format hexadécimal (ex: #424242)',
                            regex='^#[0-9A-Fa-f]{6}$'
                        )
                    ]
                )),
                ('logo_url', models.URLField(blank=True, help_text="URL du logo de l'établissement")),
                ('favicon_url', models.URLField(blank=True, help_text="URL du favicon de l'établissement")),
                ('is_active', models.BooleanField(default=True, help_text='Indique si le tenant est actif')),
                ('created_on', models.DateField(auto_now_add=True)),
                ('max_students', models.IntegerField(default=1000, help_text="Nombre maximum d'élèves autorisés")),
                ('max_storage_gb', models.IntegerField(default=50, help_text='Espace de stockage maximum en GB')),
                ('modules_enabled', models.JSONField(
                    default=dict,
                    help_text="Modules activés pour ce tenant (ex: {'attendance': True, 'ai_analytics': False})"
                )),
                ('provisioned_at', models.DateTimeField(
                    blank=True,
                    help_text='Date de provisionnement du tenant',
                    null=True
                )),
                ('last_accessed_at', models.DateTimeField(
                    blank=True,
                    help_text="Dernière date d'accès au tenant",
                    null=True
                )),
                ('school', models.OneToOneField(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='tenant',
                    to='schools.school'
                )),
            ],
            options={
                'verbose_name': 'Tenant',
                'verbose_name_plural': 'Tenants',
                'db_table': 'tenants',
                'ordering': ['schema_name'],
            },
        ),
        migrations.CreateModel(
            name='TenantSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('enable_email_notifications', models.BooleanField(
                    default=True,
                    help_text='Activer les notifications par email'
                )),
                ('enable_sms_notifications', models.BooleanField(
                    default=False,
                    help_text='Activer les notifications par SMS'
                )),
                ('password_min_length', models.IntegerField(
                    default=8,
                    help_text='Longueur minimale des mots de passe'
                )),
                ('session_timeout_minutes', models.IntegerField(
                    default=60,
                    help_text='Durée de session en minutes'
                )),
                ('timezone', models.CharField(
                    default='Europe/Paris',
                    help_text='Fuseau horaire du tenant',
                    max_length=50
                )),
                ('language', models.CharField(
                    default='fr',
                    help_text='Langue par défaut',
                    max_length=10
                )),
                ('date_format', models.CharField(
                    default='%d/%m/%Y',
                    help_text='Format de date',
                    max_length=20
                )),
                ('time_format', models.CharField(
                    default='%H:%M',
                    help_text="Format d'heure",
                    max_length=20
                )),
                ('tenant', models.OneToOneField(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='settings',
                    to='tenants.tenant'
                )),
            ],
            options={
                'verbose_name': 'Paramètres de tenant',
                'verbose_name_plural': 'Paramètres de tenant',
                'db_table': 'tenant_settings',
            },
        ),
        migrations.CreateModel(
            name='TenantDomain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('domain', models.CharField(
                    help_text='Domaine alternatif (ex: lycee-morvan.ac-paris.fr)',
                    max_length=253,
                    unique=True
                )),
                ('is_primary', models.BooleanField(
                    default=False,
                    help_text="Indique si c'est le domaine principal"
                )),
                ('tenant', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='domains',
                    to='tenants.tenant'
                )),
            ],
            options={
                'verbose_name': 'Domaine de tenant',
                'verbose_name_plural': 'Domaines de tenant',
                'db_table': 'tenant_domains',
            },
        ),
    ]