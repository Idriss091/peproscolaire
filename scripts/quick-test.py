#!/usr/bin/env python3
"""
Test rapide de validation de l'environnement PeproScolaire
"""

import os
import sys
import subprocess
import json
import time
from pathlib import Path

# Couleurs pour les logs
class Colors:
    GREEN = '\033[0;32m'
    RED = '\033[0;31m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    NC = '\033[0m'

def log(message, level="INFO"):
    color = {
        "INFO": Colors.GREEN,
        "ERROR": Colors.RED,
        "WARN": Colors.YELLOW,
        "TEST": Colors.BLUE
    }.get(level, Colors.NC)
    
    print(f"{color}[{level}]{Colors.NC} {message}")

def run_command(command, cwd=None, timeout=30):
    """Ex√©cute une commande et retourne le r√©sultat"""
    try:
        result = subprocess.run(
            command.split(),
            cwd=cwd,
            capture_output=True,
            text=True,
            timeout=timeout
        )
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return False, "", "Command timed out"
    except Exception as e:
        return False, "", str(e)

def check_docker():
    """V√©rifie que Docker est disponible"""
    log("V√©rification de Docker...")
    success, stdout, stderr = run_command("docker --version")
    if success:
        log(f"‚úÖ Docker disponible: {stdout.strip()}")
        return True
    else:
        log(f"‚ùå Docker non disponible: {stderr}")
        return False

def check_docker_compose():
    """V√©rifie que Docker Compose est disponible"""
    log("V√©rification de Docker Compose...")
    success, stdout, stderr = run_command("docker-compose --version")
    if success:
        log(f"‚úÖ Docker Compose disponible: {stdout.strip()}")
        return True
    else:
        log(f"‚ùå Docker Compose non disponible: {stderr}")
        return False

def check_node():
    """V√©rifie que Node.js est disponible"""
    log("V√©rification de Node.js...")
    success, stdout, stderr = run_command("node --version")
    if success:
        log(f"‚úÖ Node.js disponible: {stdout.strip()}")
        return True
    else:
        log(f"‚ùå Node.js non disponible: {stderr}")
        return False

def check_python():
    """V√©rifie que Python est disponible"""
    log("V√©rification de Python...")
    log(f"‚úÖ Python disponible: {sys.version}")
    return True

def check_backend_structure():
    """V√©rifie la structure du backend"""
    log("V√©rification de la structure du backend...")
    
    backend_path = Path("/home/walid/peproscolaire/backend")
    required_files = [
        "manage.py",
        "requirements.txt",
        "config/settings.py",
        "config/urls.py",
    ]
    
    required_dirs = [
        "apps/authentication",
        "apps/schools",
        "apps/grades",
        "apps/timetable",
        "apps/attendance",
        "apps/homework",
        "apps/messaging",
        "apps/student_records",
        "apps/ai_analytics"
    ]
    
    all_good = True
    
    for file_path in required_files:
        full_path = backend_path / file_path
        if full_path.exists():
            log(f"‚úÖ Fichier trouv√©: {file_path}")
        else:
            log(f"‚ùå Fichier manquant: {file_path}")
            all_good = False
    
    for dir_path in required_dirs:
        full_path = backend_path / dir_path
        if full_path.exists():
            log(f"‚úÖ Module trouv√©: {dir_path}")
        else:
            log(f"‚ùå Module manquant: {dir_path}")
            all_good = False
    
    return all_good

def check_frontend_structure():
    """V√©rifie la structure du frontend"""
    log("V√©rification de la structure du frontend...")
    
    frontend_path = Path("/home/walid/peproscolaire/frontend/peproscolaire-ui")
    required_files = [
        "package.json",
        "vite.config.ts",
        "src/main.ts",
        "src/App.vue",
    ]
    
    required_dirs = [
        "src/api",
        "src/stores",
        "src/views",
        "src/components",
        "src/types"
    ]
    
    all_good = True
    
    for file_path in required_files:
        full_path = frontend_path / file_path
        if full_path.exists():
            log(f"‚úÖ Fichier trouv√©: {file_path}")
        else:
            log(f"‚ùå Fichier manquant: {file_path}")
            all_good = False
    
    for dir_path in required_dirs:
        full_path = frontend_path / dir_path
        if full_path.exists():
            log(f"‚úÖ Dossier trouv√©: {dir_path}")
        else:
            log(f"‚ùå Dossier manquant: {dir_path}")
            all_good = False
    
    return all_good

def check_docker_compose_file():
    """V√©rifie le fichier docker-compose.yml"""
    log("V√©rification du fichier docker-compose.yml...")
    
    compose_file = Path("/home/walid/peproscolaire/docker-compose.yml")
    if not compose_file.exists():
        log("‚ùå Fichier docker-compose.yml manquant")
        return False
    
    log("‚úÖ Fichier docker-compose.yml trouv√©")
    return True

def test_docker_services():
    """Test de d√©marrage rapide des services Docker"""
    log("Test de d√©marrage des services Docker...")
    
    os.chdir("/home/walid/peproscolaire")
    
    # Arr√™ter les services existants
    log("Arr√™t des services existants...")
    run_command("docker-compose down", timeout=60)
    
    # D√©marrer PostgreSQL et Redis
    log("D√©marrage de PostgreSQL et Redis...")
    success, stdout, stderr = run_command("docker-compose up -d db redis", timeout=120)
    
    if not success:
        log(f"‚ùå √âchec du d√©marrage des services: {stderr}")
        return False
    
    # Attendre que les services soient pr√™ts
    log("Attente que les services soient pr√™ts...")
    time.sleep(20)
    
    # V√©rifier PostgreSQL
    success, stdout, stderr = run_command("docker-compose exec -T db pg_isready -U peproscolaire_user", timeout=30)
    if success:
        log("‚úÖ PostgreSQL est pr√™t")
    else:
        log(f"‚ùå PostgreSQL ne r√©pond pas: {stderr}")
    
    # V√©rifier Redis
    success, stdout, stderr = run_command("docker-compose exec -T redis redis-cli ping", timeout=30)
    if success and "PONG" in stdout:
        log("‚úÖ Redis est pr√™t")
    else:
        log(f"‚ùå Redis ne r√©pond pas: {stderr}")
    
    # Arr√™ter les services
    log("Arr√™t des services de test...")
    run_command("docker-compose down", timeout=60)
    
    return True

def check_backend_dependencies():
    """V√©rifie les d√©pendances Python du backend"""
    log("V√©rification des d√©pendances Python...")
    
    backend_path = Path("/home/walid/peproscolaire/backend")
    requirements_file = backend_path / "requirements.txt"
    
    if not requirements_file.exists():
        log("‚ùå Fichier requirements.txt manquant")
        return False
    
    # Lire le fichier requirements
    with open(requirements_file, 'r') as f:
        requirements = f.read()
    
    critical_packages = [
        "Django",
        "djangorestframework",
        "psycopg2-binary",
        "redis",
        "djangorestframework-simplejwt"
    ]
    
    all_good = True
    for package in critical_packages:
        if package in requirements:
            log(f"‚úÖ D√©pendance trouv√©e: {package}")
        else:
            log(f"‚ùå D√©pendance manquante: {package}")
            all_good = False
    
    return all_good

def check_frontend_dependencies():
    """V√©rifie les d√©pendances Node.js du frontend"""
    log("V√©rification des d√©pendances Node.js...")
    
    frontend_path = Path("/home/walid/peproscolaire/frontend/peproscolaire-ui")
    package_json = frontend_path / "package.json"
    
    if not package_json.exists():
        log("‚ùå Fichier package.json manquant")
        return False
    
    # Lire le fichier package.json
    with open(package_json, 'r') as f:
        package_data = json.load(f)
    
    dependencies = {**package_data.get('dependencies', {}), **package_data.get('devDependencies', {})}
    
    critical_packages = [
        "vue",
        "vue-router",
        "pinia",
        "axios",
        "tailwindcss",
        "typescript"
    ]
    
    all_good = True
    for package in critical_packages:
        if package in dependencies:
            log(f"‚úÖ D√©pendance trouv√©e: {package}")
        else:
            log(f"‚ùå D√©pendance manquante: {package}")
            all_good = False
    
    return all_good

def run_all_tests():
    """Ex√©cute tous les tests de validation"""
    log("üöÄ D√©marrage des tests de validation de l'environnement PeproScolaire", "INFO")
    print("=" * 70)
    
    tests = [
        ("V√©rification de Python", check_python),
        ("V√©rification de Docker", check_docker),
        ("V√©rification de Docker Compose", check_docker_compose),
        ("V√©rification de Node.js", check_node),
        ("Structure du backend", check_backend_structure),
        ("Structure du frontend", check_frontend_structure),
        ("Fichier docker-compose.yml", check_docker_compose_file),
        ("D√©pendances backend", check_backend_dependencies),
        ("D√©pendances frontend", check_frontend_dependencies),
        ("Services Docker", test_docker_services),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 50)
        
        try:
            result = test_func()
            results.append((test_name, result))
            
            if result:
                log(f"‚úÖ {test_name}: R√âUSSI", "TEST")
            else:
                log(f"‚ùå {test_name}: √âCHOU√â", "ERROR")
                
        except Exception as e:
            log(f"‚ùå {test_name}: ERREUR - {e}", "ERROR")
            results.append((test_name, False))
    
    # Rapport final
    print("\n" + "=" * 70)
    print("üìä RAPPORT DE VALIDATION")
    print("=" * 70)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    success_rate = (passed / total) * 100
    
    print(f"üìà Tests r√©ussis: {passed}/{total}")
    print(f"üìä Taux de r√©ussite: {success_rate:.1f}%")
    
    if success_rate == 100:
        log("üéâ Tous les tests ont r√©ussi ! L'environnement est pr√™t.", "INFO")
        return True
    else:
        log(f"‚ö†Ô∏è  {total - passed} test(s) ont √©chou√©. V√©rifiez les d√©tails ci-dessus.", "WARN")
        
        print("\n‚ùå TESTS √âCHOU√âS:")
        for test_name, result in results:
            if not result:
                print(f"  - {test_name}")
        
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)