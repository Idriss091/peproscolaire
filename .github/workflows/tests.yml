name: Tests PeproScolaire

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: peproscolaire_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-cov
    
    - name: Set up environment variables
      run: |
        echo "DEBUG=False" >> backend/.env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/peproscolaire_test" >> backend/.env
        echo "REDIS_URL=redis://localhost:6379/0" >> backend/.env
        echo "SECRET_KEY=test-secret-key-for-ci" >> backend/.env
    
    - name: Run migrations
      run: |
        cd backend
        python manage.py migrate --verbosity=0
    
    - name: Run AI Analytics tests
      run: |
        cd backend
        coverage run --source='apps/ai_analytics' manage.py test apps.ai_analytics --verbosity=2
    
    - name: Generate coverage report
      run: |
        cd backend
        coverage report --show-missing
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Run linting
      run: |
        cd backend
        pip install flake8 black isort
        flake8 apps/ai_analytics --max-line-length=120
        black --check apps/ai_analytics
        isort --check-only apps/ai_analytics

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: frontend/peproscolaire-ui/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend/peproscolaire-ui
        npm ci
    
    - name: Run linting
      run: |
        cd frontend/peproscolaire-ui
        npm run lint:check
    
    - name: Run TypeScript check
      run: |
        cd frontend/peproscolaire-ui
        npm run type-check
    
    - name: Run unit tests
      run: |
        cd frontend/peproscolaire-ui
        npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/peproscolaire-ui/coverage/clover.xml
        flags: frontend
        name: frontend-coverage
    
    - name: Build for production
      run: |
        cd frontend/peproscolaire-ui
        npm run build

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: peproscolaire_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: frontend/peproscolaire-ui/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd frontend/peproscolaire-ui
        npm ci
    
    - name: Set up environment variables
      run: |
        echo "DEBUG=False" >> backend/.env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/peproscolaire_test" >> backend/.env
        echo "REDIS_URL=redis://localhost:6379/0" >> backend/.env
        echo "SECRET_KEY=test-secret-key-for-ci" >> backend/.env
    
    - name: Run migrations
      run: |
        cd backend
        python manage.py migrate --verbosity=0
    
    - name: Start backend server
      run: |
        cd backend
        python manage.py runserver 8000 &
        sleep 10
      
    - name: Build and start frontend
      run: |
        cd frontend/peproscolaire-ui
        npm run build
        npm run preview &
        sleep 5
    
    - name: Run integration tests
      run: |
        cd backend
        python manage.py test apps.ai_analytics.test_integration --verbosity=2
    
    - name: Health check endpoints
      run: |
        curl -f http://localhost:8000/api/v1/health/ || exit 1
        curl -f http://localhost:4173/ || exit 1

  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit security linter (Python)
      run: |
        pip install bandit
        bandit -r backend/apps/ai_analytics -f json -o bandit-report.json || true
    
    - name: Run npm audit (Node.js)
      run: |
        cd frontend/peproscolaire-ui
        npm audit --audit-level=moderate || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          frontend/peproscolaire-ui/npm-audit.json

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: peproscolaire_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Set up environment
      run: |
        echo "DEBUG=False" >> backend/.env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/peproscolaire_test" >> backend/.env
        echo "SECRET_KEY=test-secret-key-for-ci" >> backend/.env
    
    - name: Run migrations and create test data
      run: |
        cd backend
        python manage.py migrate --verbosity=0
        python manage.py loaddata apps/schools/fixtures/initial_data.json
    
    - name: Start server
      run: |
        cd backend
        python manage.py runserver 8000 &
        sleep 10
    
    - name: Run performance tests
      run: |
        cd backend
        # Test des endpoints IA avec Locust
        echo "
        from locust import HttpUser, task, between
        
        class AIModuleUser(HttpUser):
            wait_time = between(1, 3)
            
            def on_start(self):
                # Login
                response = self.client.post('/api/v1/auth/login/', {
                    'email': 'admin@test.com',
                    'password': 'admin123'
                })
                if response.status_code == 200:
                    self.token = response.json().get('access')
                    self.client.headers.update({'Authorization': f'Bearer {self.token}'})
            
            @task(3)
            def get_model_status(self):
                self.client.get('/api/v1/ai-analytics/ai/model/status/')
            
            @task(2)
            def get_dashboard_metrics(self):
                self.client.get('/api/v1/ai-analytics/ai/dashboard/metrics/')
            
            @task(1)
            def get_risk_profiles(self):
                self.client.get('/api/v1/ai-analytics/risk-profiles/')
        " > locustfile.py
        
        locust --headless -u 10 -r 2 -t 30s --host=http://localhost:8000

  deploy-check:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check deployment readiness
      run: |
        echo "âœ… All tests passed!"
        echo "ðŸš€ Ready for deployment"
        
        # VÃ©rifier les fichiers de configuration
        if [ -f "docker-compose.yml" ]; then
          echo "âœ… Docker configuration found"
        fi
        
        if [ -f "backend/requirements.txt" ]; then
          echo "âœ… Backend dependencies defined"
        fi
        
        if [ -f "frontend/peproscolaire-ui/package.json" ]; then
          echo "âœ… Frontend dependencies defined"
        fi
    
    - name: Generate deployment summary
      run: |
        echo "## ðŸŽ‰ Tests Summary" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Backend tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Frontend tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Integration tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸš€ Ready for production deployment" >> $GITHUB_STEP_SUMMARY