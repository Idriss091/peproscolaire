version: '3.8'

services:
  # Base de données PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: pepro_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-peproscolaire}
      POSTGRES_USER: ${DATABASE_USER:-pepro}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=fr_FR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - pepro_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-pepro} -d ${DATABASE_NAME:-peproscolaire}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis pour le cache et Celery
  redis:
    image: redis:7-alpine
    container_name: pepro_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - pepro_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend Django
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: pepro_backend_prod
    restart: unless-stopped
    environment:
      # Configuration Django
      DJANGO_ENV: production
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      
      # Base de données
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-peproscolaire}
      DATABASE_USER: ${DATABASE_USER:-pepro}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      
      # Email
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-True}
      
      # Sécurité
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      
      # Superutilisateur par défaut
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      
      # Configuration IA
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
      
      # Autres
      LOAD_INITIAL_DATA: "true"
      DB_WAIT_TIMEOUT: 60
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/mediafiles
      - backend_logs:/app/logs
    ports:
      - "127.0.0.1:8000:8000"
    networks:
      - pepro_network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Celery Worker pour les tâches asynchrones
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: pepro_celery_worker_prod
    restart: unless-stopped
    command: celery -A config worker --loglevel=info --concurrency=4
    environment:
      DJANGO_ENV: production
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-peproscolaire}
      DATABASE_USER: ${DATABASE_USER:-pepro}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
    volumes:
      - media_files:/app/mediafiles
      - backend_logs:/app/logs
    networks:
      - pepro_network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Celery Beat pour les tâches planifiées
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: pepro_celery_beat_prod
    restart: unless-stopped
    command: celery -A config beat --loglevel=info
    environment:
      DJANGO_ENV: production
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-peproscolaire}
      DATABASE_USER: ${DATABASE_USER:-pepro}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    volumes:
      - backend_logs:/app/logs
    networks:
      - pepro_network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Vue.js avec Nginx
  frontend:
    build:
      context: ./frontend/peproscolaire-ui
      dockerfile: Dockerfile
    container_name: pepro_frontend_prod
    restart: unless-stopped
    environment:
      VITE_API_URL: ${FRONTEND_API_URL:-http://localhost:8000/api/v1}
      VITE_APP_NAME: ${APP_NAME:-PEP RO Scolaire}
      VITE_APP_VERSION: ${APP_VERSION:-1.0.0}
    volumes:
      - frontend_logs:/var/log/nginx
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - pepro_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Reverse Proxy Nginx (optionnel pour HTTPS)
  nginx_proxy:
    image: nginx:alpine
    container_name: pepro_nginx_proxy_prod
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - static_files:/var/www/static:ro
      - media_files:/var/www/media:ro
      - proxy_logs:/var/log/nginx
    networks:
      - pepro_network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
    profiles:
      - ssl

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: pepro_prometheus_prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - pepro_network
    profiles:
      - monitoring

  # Grafana pour les tableaux de bord (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: pepro_grafana_prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - pepro_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_files:
    driver: local
  media_files:
    driver: local
  backend_logs:
    driver: local
  frontend_logs:
    driver: local
  proxy_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  pepro_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16