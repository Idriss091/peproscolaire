version: '3.9'

services:
  # Service PostgreSQL - Base de données principale
  db:
    image: postgres:16-alpine
    container_name: peproscolaire_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=peproscolaire
      - POSTGRES_USER=peproscolaire_user
      - POSTGRES_PASSWORD=peproscolaire_secure_password
    ports:
      - "5432:5432"
    networks:
      - peproscolaire_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U peproscolaire_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service Redis - Cache et sessions
  redis:
    image: redis:7-alpine
    container_name: peproscolaire_redis
    command: redis-server --requirepass peproscolaire_redis_password
    ports:
      - "6379:6379"
    networks:
      - peproscolaire_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service Backend Django
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: peproscolaire_backend
    command: >
      sh -c "
        python manage.py wait_for_db &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - peproscolaire_network
  # Service Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: peproscolaire_celery
    command: celery -A config worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - db
      - redis
    networks:
      - peproscolaire_network

  # Service Celery Beat (planificateur)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: peproscolaire_celery_beat
    command: celery -A config beat -l info
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - db
      - redis
    networks:
      - peproscolaire_network


  # Service Frontend Vue.js (sera ajouté en Phase 2)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: peproscolaire_frontend
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - peproscolaire_network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  peproscolaire_network:
    driver: bridge
